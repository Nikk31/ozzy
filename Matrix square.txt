%%cu
#include <stdio.h>
#include <cuda.h>

#define N 1000

__global__ void square(float *input, float *output) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < N) {
        output[i] = input[i] * input[i];
    }
}

int main() {
    float *input, *output;
    float *d_input, *d_output;

    input = (float*)malloc(N * sizeof(float));
    output = (float*)malloc(N * sizeof(float));

    // Initializing the input array with random values
    for (int i = 0; i < N; i++) {
        input[i] = (float)rand() / RAND_MAX;
    }

    cudaMalloc(&d_input, N * sizeof(float));
    cudaMalloc(&d_output, N * sizeof(float));

    cudaMemcpy(d_input, input, N * sizeof(float), cudaMemcpyHostToDevice);

    square<<<1, N>>>(d_input, d_output);

    cudaMemcpy(output, d_output, N * sizeof(float), cudaMemcpyDeviceToHost);

    for (int i = 0; i < N; i++) {
        printf("%f ", output[i]);
    }
    printf("\n");

    cudaFree(d_input);
    cudaFree(d_output);
    free(input);
    free(output);

    return 0;
}