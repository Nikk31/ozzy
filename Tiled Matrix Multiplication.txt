%%cu
#include <stdio.h>
#include <stdlib.h>
#include <cuda_runtime.h>

#define TILE_SIZE 2
#define MATRIX_SIZE 4

__global__ void tiledMatrixMultiply(float* A, float* B, float* C, int size)
{
    __shared__ float As[TILE_SIZE][TILE_SIZE];
    __shared__ float Bs[TILE_SIZE][TILE_SIZE];

    int bx = blockIdx.x;
    int by = blockIdx.y;
    int tx = threadIdx.x;
    int ty = threadIdx.y;

    int Row = by * TILE_SIZE + ty;
    int Col = bx * TILE_SIZE + tx;

    float Cvalue = 0.0;

    for (int t = 0; t < size/TILE_SIZE; ++t)
    {
        As[ty][tx] = A[Row * size + t * TILE_SIZE + tx];
        Bs[ty][tx] = B[(t * TILE_SIZE + ty) * size + Col];

        __syncthreads();

        for (int k = 0; k < TILE_SIZE; ++k)
        {
            Cvalue += As[ty][k] * Bs[k][tx];
        }

        __syncthreads();
    }

    C[Row * size + Col] = Cvalue;
}

int main()
{
    float *h_A = (float*)malloc(MATRIX_SIZE * MATRIX_SIZE * sizeof(float));
    float *h_B = (float*)malloc(MATRIX_SIZE * MATRIX_SIZE * sizeof(float));
    float *h_C = (float*)malloc(MATRIX_SIZE * MATRIX_SIZE * sizeof(float));
    float *d_A, *d_B, *d_C;

    cudaMalloc(&d_A, MATRIX_SIZE * MATRIX_SIZE * sizeof(float));
    cudaMalloc(&d_B, MATRIX_SIZE * MATRIX_SIZE * sizeof(float));
    cudaMalloc(&d_C, MATRIX_SIZE * MATRIX_SIZE * sizeof(float));

    for (int i = 0; i < MATRIX_SIZE * MATRIX_SIZE; ++i)
    {
        h_A[i] = (float)rand() / RAND_MAX;
        h_B[i] = (float)rand() / RAND_MAX;
    }

    cudaMemcpy(d_A, h_A, MATRIX_SIZE * MATRIX_SIZE * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, MATRIX_SIZE * MATRIX_SIZE * sizeof(float), cudaMemcpyHostToDevice);

    dim3 dimBlock(TILE_SIZE, TILE_SIZE);
    dim3 dimGrid(MATRIX_SIZE/TILE_SIZE, MATRIX_SIZE/TILE_SIZE);

    tiledMatrixMultiply<<<dimGrid, dimBlock>>>(d_A, d_B, d_C, MATRIX_SIZE);

    cudaMemcpy(h_C, d_C, MATRIX_SIZE * MATRIX_SIZE * sizeof(float), cudaMemcpyDeviceToHost);
 
    printf("Matrix A: \n");
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            printf("%f ", h_A[i * MATRIX_SIZE + j]);
        }
        printf("\n");
    }
    printf("\n");
    printf("Matrix B: \n");
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            printf("%f ", h_B[i * MATRIX_SIZE + j]);
        }
        printf("\n");
    }
    printf("\n");
    printf("Matrix C: \n");
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            printf("%f ", h_C[i * MATRIX_SIZE + j]);
        }
        printf("\n");
    }

    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);
    free(h_A);
    free(h_B);
    free(h_C);

    return 0;
}
