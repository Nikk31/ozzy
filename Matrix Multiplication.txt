%%cu
#include <stdio.h>
#include <stdlib.h>
#include <cuda_runtime.h>

#define TILE_WIDTH 2

__global__ void matrixMulKernel(float* A, float* B, float* C, int width)
{
    int tx = threadIdx.x;
    int ty = threadIdx.y;
    int bx = blockIdx.x;
    int by = blockIdx.y;

    int row = by * TILE_WIDTH + ty;
    int col = bx * TILE_WIDTH + tx;

    float Cvalue = 0.0;

    for (int k = 0; k < width; ++k)
        Cvalue += A[row * width + k] * B[k * width + col];

    C[row * width + col] = Cvalue;
}

int main()
{
    const int width = 4;

    float *h_A = (float*)malloc(width * width * sizeof(float));
    float *h_B = (float*)malloc(width * width * sizeof(float));
    float *h_C = (float*)malloc(width * width * sizeof(float));
    float *d_A, *d_B, *d_C;

    cudaMalloc(&d_A, width * width * sizeof(float));
    cudaMalloc(&d_B, width * width * sizeof(float));
    cudaMalloc(&d_C, width * width * sizeof(float));

    for (int i = 0; i < width * width; ++i)
    {
        h_A[i] = (float)rand() / RAND_MAX;
        h_B[i] = (float)rand() / RAND_MAX;
    }

    cudaMemcpy(d_A, h_A, width * width * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, width * width * sizeof(float), cudaMemcpyHostToDevice);

    dim3 dimBlock(TILE_WIDTH, TILE_WIDTH);
    dim3 dimGrid(width/TILE_WIDTH, width/TILE_WIDTH);

    matrixMulKernel<<<dimGrid, dimBlock>>>(d_A, d_B, d_C, width);

    cudaMemcpy(h_C, d_C, width * width * sizeof(float), cudaMemcpyDeviceToHost);

    printf("Matrix A: \n");
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            printf("%f ", h_A[i * width + j]);
        }
        printf("\n");
    }
    printf("\n");
    printf("Matrix B: \n");
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            printf("%f ", h_B[i * width + j]);
        }
        printf("\n");
    }
    printf("\n");
    printf("Matrix C: \n");
    for (int i = 0; i < 4; ++i)
    {
        for (int j = 0; j < 4; ++j)
        {
            printf("%f ", h_C[i * width + j]);
        }
        printf("\n");
    }
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);
    free(h_A);
    free(h_B);
    free(h_C);

    return 0;
}
