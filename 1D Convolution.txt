%%cu

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>
#include<cuda.h>

#define Msize 5
#define n 8

__global__ void convolution_1D_basic_kernel(float *N, float *M, float *P, int Mask_Width, int Width) 
{
 	 int i = blockIdx.x*blockDim.x + threadIdx.x;

  	float Pvalue = 0;
  	int N_start_point = i - (Mask_Width/2);
  
	for (int j = 0; j < Mask_Width; j++) 
	{
    		if (N_start_point + j >= 0 && N_start_point + j < Width) 
			{	
      			Pvalue += N[N_start_point + j]*M[j];
    		}
  	}
  	P[i] = Pvalue;
}

int main()
{
	float *N_h, *N, *M, *P, *P_h;
	int i;
	int an=16;
	
	
	float size=an*sizeof(float);

	N_h=(float *)malloc(size);
	P_h=(float *)malloc(size);
	//M_h=(float *)malloc(Msize*sizeof(float));

	printf("\n Array is:\n");
	for(i=0;i<n;i++)
	{	N_h[i]=i + 1;  printf(" %f ", N_h[i]);  }

	float M_h[Msize]={3.0, 4.0, 5.0, 4.0, 3.0};

	printf("\n Mask is:\n");
	
	for(i=0;i < Msize;i++)
		printf(" %f ", M_h[i]);  

	cudaMalloc((void **)&N, size);
	cudaMalloc((void **)&M, Msize*sizeof(float));
	cudaMalloc((void **)&P, size);

	cudaMemcpy(N, N_h, size, cudaMemcpyHostToDevice);

	cudaMemcpy(M, M_h, Msize*sizeof(float), cudaMemcpyHostToDevice);

	convolution_1D_basic_kernel<<< 2, n/2>>>(N, M, P, Msize, n);
	 
	cudaMemcpy(P_h, P, size, cudaMemcpyDeviceToHost);

	printf("\n\n Result is:\n");
	for(i=0; i<n; i++)
		printf(" %f ",P_h[i]);

	return 0;
}
